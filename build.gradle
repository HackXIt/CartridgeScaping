plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version('0.0.10')
    id 'org.beryx.jlink' version('2.24.1')
}

group('fhtw')
version('0.1-MVP')

// Auto accept terms of service when performing build-scan
if (hasProperty('buildScan')) {
/*
    FIXME For some reason this variable gives: "No candidates found for method call buildScan"
    NOTE It runs just fine however...
 */
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

repositories {
    mavenCentral()
}

//sourceCompatibility = '17'
//targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.named('wrapper') {
    distributionUrl = 'https://services.gradle.org/distributions/gradle-7.3.3-all.zip'
}

//apply plugin: 'gradle-one-jar'
//
//task awesomeFunJar(type: OneJar) {
//    mainClass = 'fhtw.cartridgeScaping.CartridgeScapingApp'
//}

//task deployJar(type: Jar, dependsOn: jar) {
//    baseName = project.name + '-deploy'
//    deps = configurations.runtime + configurations.archives.allArtifactFiles
//    depClasses = { deps.collect { it.isDirectory() ? it : zipTree(it) } }
//    from(depClasses) {
//        exclude 'META-INF/MANIFEST.MF'
//    }
//    manifest {
//        attributes 'Main-Class': 'fhtw.cartridgeScaping.cartridgeScapingApp'
//    }
//}

application {
    mainModule = 'fhtw.cartridgeScaping'
    mainClass = 'fhtw.cartridgeScaping.CartridgeScapingApp'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation('org.testng:testng:7.5')
    implementation 'commons-io:commons-io:2.11.0'
}


//tasks.named<org.gradle.jvm.tasks.Jar>("releaseSourcesJar") {
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//}
//
//tasks.register('uberJar', Jar) {
//    archiveClassifier = 'uber'
//
//    from sourceSets.main.output
//
//    dependsOn configurations.runtimeClasspath
//    from {
//        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//    }
//}

test {
    useTestNG()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip") as RegularFile
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'CartridgeScapingApp'
    }
}

jlinkZip {
    group = 'distribution'
}